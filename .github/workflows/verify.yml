name: Verify
on:
  workflow_call:
    inputs:
      brakeman:
        type: boolean
      bundler-audit:
        type: boolean
      node-version:
        type: string
      node-version-file:
        type: string
      bun-version:
        type: string
        default: latest
      rspec:
        type: boolean
      rubocop:
        type: boolean
      standard:
        type: boolean
      run-after-checkout:
        type: string
      run-before-tests:
        type: string
      run-before-linters:
        type: string


jobs:
  linters:
    name: Linters
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Run after checkout
        if: ${{ inputs.run-after-checkout != '' }}
        run: |
          ${{ inputs.run-after-checkout }}

      - name: Check for package.json existence
        id: package_json_check
        uses: andstor/file-existence-action@v2
        with:
          files: "package.json"

      - name: Check for bun.lockb existence
        id: bun_lock_check
        uses: andstor/file-existence-action@v2
        with:
          files: "bun.lockb"

      - name: Set up Ruby and install gems
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - name: Set up Node
        uses: actions/setup-node@v3
        if: steps.package_json_check.outputs.files_exists == 'true' && steps.bun_lock_check.outputs.files_exists == 'false' && hashFiles('yarn.lock') != ''
        with:
          node-version: ${{ inputs.node-version }}
          node-version-file: ${{ inputs.node-version-file }}
          cache: "yarn"

      - name: Install Node packages
        if: steps.package_json_check.outputs.files_exists == 'true' && steps.bun_lock_check.outputs.files_exists == 'false'
        run: |
          yarn install --pure-lockfile

      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        if: steps.package_json_check.outputs.files_exists == 'true' && steps.bun_lock_check.outputs.files_exists == 'true'
        with:
          bun-version: ${{ inputs.bun-version }}

      - name: Install Bun packages
        if: steps.package_json_check.outputs.files_exists == 'true' && steps.bun_lock_check.outputs.files_exists == 'true'
        run: |
          bun install --frozen-lockfile

      - name: Check if Sorbet is in use
        id: sorbet_check
        uses: andstor/file-existence-action@v2
        with:
          files: "sorbet"

      - name: Run Sorbet typecheck
        if: steps.sorbet_check.outputs.files_exists == 'true'
        run: |
          bundle exec srb typecheck

      - name: Tapioca - check duplicated definitions in shims
        if: steps.sorbet_check.outputs.files_exists == 'true'
        run: |
          bundle exec tapioca check-shims

      - name: Run Spoom bump check
        if: steps.sorbet_check.outputs.files_exists == 'true'
        run: |
          bundle exec spoom bump --dry

      - name: Run linters - RuboCop
        if: ${{ inputs.rubocop == true }}
        run: |
          ${{ inputs.run-before-linters }}
          bundle exec rubocop --parallel

      - name: Run linters - Standard
        if: ${{ inputs.standard == true }}
        run: |
          ${{ inputs.run-before-linters }}
          bundle exec standardrb

      - name: Run security checks - brakeman
        if: ${{ inputs.brakeman == true }}
        run: |
          bundle exec brakeman -q -w2

      - name: Run security checks - bundler-audit
        if: ${{ inputs.bundler-audit == true }}
        run: |
          bundle exec bundler-audit --update

  tests:
    name: Tests
    runs-on: ubuntu-latest
    env:
      BUNDLE_WITHOUT: development
      PGHOST: localhost
      PGUSER: postgres
      PGPASSWORD: postgres
      RAILS_ENV: test
      REDIS_HOST: redis
    services:
      postgres:
        image: postgres
        ports: ["5432:5432"]
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports: ["6379:6379"]
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Run after checkout
        if: ${{ inputs.run-after-checkout != '' }}
        run: |
          ${{ inputs.run-after-checkout }}

      - name: Check for package.json existence
        id: package_json_check
        uses: andstor/file-existence-action@v2
        with:
          files: "package.json"

      - name: Check for bun.lockb existence
        id: bun_lock_check
        uses: andstor/file-existence-action@v2
        with:
          files: "bun.lockb"

      - name: Set up Ruby and install gems
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - name: Set up Node
        uses: actions/setup-node@v3
        if: steps.package_json_check.outputs.files_exists == 'true' && steps.bun_lock_check.outputs.files_exists == 'false' && hashFiles('yarn.lock') != ''
        with:
          node-version: ${{ inputs.node-version }}
          node-version-file: ${{ inputs.node-version-file }}
          cache: "yarn"

      - name: Install Node packages
        if: steps.package_json_check.outputs.files_exists == 'true' && steps.bun_lock_check.outputs.files_exists == 'false'
        run: |
          yarn install --pure-lockfile

      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        if: steps.package_json_check.outputs.files_exists == 'true' && steps.bun_lock_check.outputs.files_exists == 'true'
        with:
          bun-version: ${{ inputs.bun-version }}

      - name: Install Bun packages
        if: steps.package_json_check.outputs.files_exists == 'true' && steps.bun_lock_check.outputs.files_exists == 'true'
        run: |
          bun install --frozen-lockfile

      - name: Set up test database
        env:
          PGHOST: localhost
          PGUSER: postgres
          PGPASSWORD: postgres
          RAILS_ENV: test
        run: |
          ${{ inputs.run-before-tests }}
          bundle exec rails db:setup

      - name: Run tests (RSpec)
        if: ${{ inputs.rspec == true }}
        run: |
          bundle exec rspec

      - name: Run tests
        if: ${{ inputs.rspec != true }}
        run: |
          bundle exec rails test:all
